// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api.proto

package whist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamingParamsServiceClient is the client API for StreamingParamsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingParamsServiceClient interface {
	// The StreamingParams RPC takes as input a request to start a streaming
	// session and returns the parameters the Whist protocol client should use to
	// connect to the allocated Mandelbox.
	StreamingParams(ctx context.Context, in *StreamingParamsRequest, opts ...grpc.CallOption) (*StreamingParamsResponse, error)
}

type streamingParamsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingParamsServiceClient(cc grpc.ClientConnInterface) StreamingParamsServiceClient {
	return &streamingParamsServiceClient{cc}
}

func (c *streamingParamsServiceClient) StreamingParams(ctx context.Context, in *StreamingParamsRequest, opts ...grpc.CallOption) (*StreamingParamsResponse, error) {
	out := new(StreamingParamsResponse)
	err := c.cc.Invoke(ctx, "/com.whist.rpcs.StreamingParamsService/StreamingParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamingParamsServiceServer is the server API for StreamingParamsService service.
// All implementations must embed UnimplementedStreamingParamsServiceServer
// for forward compatibility
type StreamingParamsServiceServer interface {
	// The StreamingParams RPC takes as input a request to start a streaming
	// session and returns the parameters the Whist protocol client should use to
	// connect to the allocated Mandelbox.
	StreamingParams(context.Context, *StreamingParamsRequest) (*StreamingParamsResponse, error)
	mustEmbedUnimplementedStreamingParamsServiceServer()
}

// UnimplementedStreamingParamsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamingParamsServiceServer struct {
}

func (UnimplementedStreamingParamsServiceServer) StreamingParams(context.Context, *StreamingParamsRequest) (*StreamingParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamingParams not implemented")
}
func (UnimplementedStreamingParamsServiceServer) mustEmbedUnimplementedStreamingParamsServiceServer() {
}

// UnsafeStreamingParamsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingParamsServiceServer will
// result in compilation errors.
type UnsafeStreamingParamsServiceServer interface {
	mustEmbedUnimplementedStreamingParamsServiceServer()
}

func RegisterStreamingParamsServiceServer(s grpc.ServiceRegistrar, srv StreamingParamsServiceServer) {
	s.RegisterService(&StreamingParamsService_ServiceDesc, srv)
}

func _StreamingParamsService_StreamingParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamingParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingParamsServiceServer).StreamingParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.whist.rpcs.StreamingParamsService/StreamingParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingParamsServiceServer).StreamingParams(ctx, req.(*StreamingParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamingParamsService_ServiceDesc is the grpc.ServiceDesc for StreamingParamsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamingParamsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.whist.rpcs.StreamingParamsService",
	HandlerType: (*StreamingParamsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StreamingParams",
			Handler:    _StreamingParamsService_StreamingParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
